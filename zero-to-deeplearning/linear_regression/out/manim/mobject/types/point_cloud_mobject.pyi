from ...constants import *
from ...mobject.mobject import Mobject
from _typeshed import Incomplete
from manim.mobject.opengl.opengl_compatibility import ConvertToOpenGL

class PMobject(Mobject, metaclass=ConvertToOpenGL):
    stroke_width: Incomplete
    def __init__(self, stroke_width=..., **kwargs) -> None: ...
    rgbas: Incomplete
    points: Incomplete
    def reset_points(self): ...
    def get_array_attrs(self): ...
    def add_points(self, points, rgbas: Incomplete | None = ..., color: Incomplete | None = ..., alpha: int = ...): ...
    color: Incomplete
    def set_color(self, color=..., family: bool = ...): ...
    def get_stroke_width(self): ...
    def set_stroke_width(self, width, family: bool = ...): ...
    def set_color_by_gradient(self, *colors): ...
    def set_colors_by_radial_gradient(self, center: Incomplete | None = ..., radius: int = ..., inner_color=..., outer_color=...): ...
    def match_colors(self, mobject): ...
    def filter_out(self, condition): ...
    def thin_out(self, factor: int = ...): ...
    def sort_points(self, function=...): ...
    def fade_to(self, color, alpha, family: bool = ...): ...
    def get_all_rgbas(self): ...
    submobjects: Incomplete
    def ingest_submobjects(self): ...
    def get_color(self): ...
    def point_from_proportion(self, alpha): ...
    @staticmethod
    def get_mobject_type_class(): ...
    def align_points_with_larger(self, larger_mobject): ...
    def get_point_mobject(self, center: Incomplete | None = ...): ...
    def interpolate_color(self, mobject1, mobject2, alpha): ...
    def pointwise_become_partial(self, mobject, a, b) -> None: ...

class Mobject1D(PMobject, metaclass=ConvertToOpenGL):
    density: Incomplete
    epsilon: Incomplete
    def __init__(self, density=..., **kwargs) -> None: ...
    def add_line(self, start, end, color: Incomplete | None = ...) -> None: ...

class Mobject2D(PMobject, metaclass=ConvertToOpenGL):
    density: Incomplete
    epsilon: Incomplete
    def __init__(self, density=..., **kwargs) -> None: ...

class PGroup(PMobject):
    def __init__(self, *pmobs, **kwargs) -> None: ...
    def fade_to(self, color, alpha, family: bool = ...) -> None: ...

class PointCloudDot(Mobject1D):
    radius: Incomplete
    epsilon: Incomplete
    def __init__(self, center=..., radius: float = ..., stroke_width: int = ..., density=..., color=..., **kwargs) -> None: ...
    def init_points(self) -> None: ...
    def generate_points(self) -> None: ...

class Point(PMobject):
    location: Incomplete
    def __init__(self, location=..., color=..., **kwargs) -> None: ...
    def init_points(self) -> None: ...
    def generate_points(self) -> None: ...

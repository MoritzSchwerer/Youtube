from manim.constants import *
from _typeshed import Incomplete
from colour import Color
from manim.mobject.geometry.polygram import Rectangle
from manim.mobject.graphing.coordinate_systems import Axes
from manim.mobject.types.vectorized_mobject import VMobject
from typing import Iterable, MutableSequence, Sequence

class SampleSpace(Rectangle):
    default_label_scale_val: Incomplete
    def __init__(self, height: int = ..., width: int = ..., fill_color=..., fill_opacity: int = ..., stroke_width: float = ..., stroke_color=..., default_label_scale_val: int = ...) -> None: ...
    title: Incomplete
    def add_title(self, title: str = ..., buff=...) -> None: ...
    label: Incomplete
    def add_label(self, label) -> None: ...
    def complete_p_list(self, p_list): ...
    def get_division_along_dimension(self, p_list, dim, colors, vect): ...
    def get_horizontal_division(self, p_list, colors=..., vect=...): ...
    def get_vertical_division(self, p_list, colors=..., vect=...): ...
    horizontal_parts: Incomplete
    def divide_horizontally(self, *args, **kwargs) -> None: ...
    vertical_parts: Incomplete
    def divide_vertically(self, *args, **kwargs) -> None: ...
    def get_subdivision_braces_and_labels(self, parts, labels, direction, buff=..., min_num_quads: int = ...): ...
    def get_side_braces_and_labels(self, labels, direction=..., **kwargs): ...
    def get_top_braces_and_labels(self, labels, **kwargs): ...
    def get_bottom_braces_and_labels(self, labels, **kwargs): ...
    def add_braces_and_labels(self) -> None: ...
    def __getitem__(self, index): ...

class BarChart(Axes):
    values: Incomplete
    bar_names: Incomplete
    bar_colors: Incomplete
    bar_width: Incomplete
    bar_fill_opacity: Incomplete
    bar_stroke_width: Incomplete
    bars: Incomplete
    x_labels: Incomplete
    bar_labels: Incomplete
    def __init__(self, values: MutableSequence[float], bar_names: Sequence[str] | None = ..., y_range: Sequence[float] | None = ..., x_length: float | None = ..., y_length: float | None = ..., bar_colors: Iterable[str] = ..., bar_width: float = ..., bar_fill_opacity: float = ..., bar_stroke_width: float = ..., **kwargs) -> None: ...
    def get_bar_labels(self, color: Color | None = ..., font_size: float = ..., buff: float = ..., label_constructor: type[VMobject] = ...): ...
    def change_bar_values(self, values: Iterable[float], update_colors: bool = ...): ...

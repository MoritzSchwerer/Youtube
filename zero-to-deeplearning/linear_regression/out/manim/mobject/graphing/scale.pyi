from _typeshed import Incomplete
from manim.mobject.mobject import Mobject
from typing import Any, Iterable

class _ScaleBase:
    custom_labels: Incomplete
    def __init__(self, custom_labels: bool = ...) -> None: ...
    def function(self, value: float) -> float: ...
    def inverse_function(self, value: float) -> float: ...
    def get_custom_labels(self, val_range: Iterable[float]) -> Iterable[Mobject]: ...

class LinearBase(_ScaleBase):
    scale_factor: Incomplete
    def __init__(self, scale_factor: float = ...) -> None: ...
    def function(self, value: float) -> float: ...
    def inverse_function(self, value: float) -> float: ...

class LogBase(_ScaleBase):
    base: Incomplete
    custom_labels: Incomplete
    def __init__(self, base: float = ..., custom_labels: bool = ...) -> None: ...
    def function(self, value: float) -> float: ...
    def inverse_function(self, value: float) -> float: ...
    def get_custom_labels(self, val_range: Iterable[float], unit_decimal_places: int = ..., **base_config: dict[str, Any]) -> list[Mobject]: ...

from ..animation.animation import Animation
from ..animation.composition import AnimationGroup
from ..mobject.types.vectorized_mobject import VGroup, VMobject
from _typeshed import Incomplete
from colour import Color
from manim.mobject.geometry.polygram import Polygon
from manim.mobject.geometry.shape_matchers import BackgroundRectangle
from typing import Callable, Iterable, Sequence

class Table(VGroup):
    row_labels: Incomplete
    col_labels: Incomplete
    top_left_entry: Incomplete
    row_dim: Incomplete
    col_dim: Incomplete
    v_buff: Incomplete
    h_buff: Incomplete
    include_outer_lines: Incomplete
    add_background_rectangles_to_entries: Incomplete
    entries_background_color: Incomplete
    include_background_rectangle: Incomplete
    background_rectangle_color: Incomplete
    element_to_mobject: Incomplete
    element_to_mobject_config: Incomplete
    arrange_in_grid_config: Incomplete
    line_config: Incomplete
    elements_without_labels: Incomplete
    elements: Incomplete
    mob_table: Incomplete
    def __init__(self, table: Iterable[Iterable[float | str | VMobject]], row_labels: Iterable[VMobject] | None = ..., col_labels: Iterable[VMobject] | None = ..., top_left_entry: VMobject | None = ..., v_buff: float = ..., h_buff: float = ..., include_outer_lines: bool = ..., add_background_rectangles_to_entries: bool = ..., entries_background_color: Color = ..., include_background_rectangle: bool = ..., background_rectangle_color: Color = ..., element_to_mobject: Callable[[float | str | VMobject], VMobject] = ..., element_to_mobject_config: dict = ..., arrange_in_grid_config: dict = ..., line_config: dict = ..., **kwargs) -> None: ...
    def get_horizontal_lines(self) -> VGroup: ...
    def get_vertical_lines(self) -> VGroup: ...
    def get_columns(self) -> VGroup: ...
    def get_rows(self) -> VGroup: ...
    def set_column_colors(self, *colors: Iterable[Color]) -> Table: ...
    def set_row_colors(self, *colors: Iterable[Color]) -> Table: ...
    def get_entries(self, pos: Sequence[int] | None = ...) -> VMobject | VGroup: ...
    def get_entries_without_labels(self, pos: Sequence[int] | None = ...) -> VMobject | VGroup: ...
    def get_row_labels(self) -> VGroup: ...
    def get_col_labels(self) -> VGroup: ...
    def get_labels(self) -> VGroup: ...
    def add_background_to_entries(self, color: Color = ...) -> Table: ...
    def get_cell(self, pos: Sequence[int] = ..., **kwargs) -> Polygon: ...
    def get_highlighted_cell(self, pos: Sequence[int] = ..., color: Color = ..., **kwargs) -> BackgroundRectangle: ...
    def add_highlighted_cell(self, pos: Sequence[int] = ..., color: Color = ..., **kwargs) -> Table: ...
    def create(self, lag_ratio: float = ..., line_animation: Callable[[VMobject | VGroup], Animation] = ..., label_animation: Callable[[VMobject | VGroup], Animation] = ..., element_animation: Callable[[VMobject | VGroup], Animation] = ..., entry_animation: Callable[[VMobject | VGroup], Animation] = ..., **kwargs) -> AnimationGroup: ...
    def scale(self, scale_factor: float, **kwargs): ...

class MathTable(Table):
    def __init__(self, table: Iterable[Iterable[float | str]], element_to_mobject: Callable[[float | str], VMobject] = ..., **kwargs) -> None: ...

class MobjectTable(Table):
    def __init__(self, table: Iterable[Iterable[VMobject]], element_to_mobject: Callable[[VMobject], VMobject] = ..., **kwargs) -> None: ...

class IntegerTable(Table):
    def __init__(self, table: Iterable[Iterable[float | str]], element_to_mobject: Callable[[float | str], VMobject] = ..., **kwargs) -> None: ...

class DecimalTable(Table):
    def __init__(self, table: Iterable[Iterable[float | str]], element_to_mobject: Callable[[float | str], VMobject] = ..., element_to_mobject_config: dict = ..., **kwargs) -> None: ...

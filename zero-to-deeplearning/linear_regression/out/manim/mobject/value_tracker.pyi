from manim.mobject.mobject import Mobject
from manim.mobject.opengl.opengl_compatibility import ConvertToOpenGL

class ValueTracker(Mobject, metaclass=ConvertToOpenGL):
    def __init__(self, value: int = ..., **kwargs) -> None: ...
    def get_value(self) -> float: ...
    def set_value(self, value: float): ...
    def increment_value(self, d_value: float): ...
    def __bool__(self) -> bool: ...
    def __iadd__(self, d_value: float): ...
    def __ifloordiv__(self, d_value: float): ...
    def __imod__(self, d_value: float): ...
    def __imul__(self, d_value: float): ...
    def __ipow__(self, d_value: float): ...
    def __isub__(self, d_value: float): ...
    def __itruediv__(self, d_value: float): ...
    def interpolate(self, mobject1, mobject2, alpha, path_func=...): ...

class ComplexValueTracker(ValueTracker):
    def get_value(self): ...
    def set_value(self, z): ...

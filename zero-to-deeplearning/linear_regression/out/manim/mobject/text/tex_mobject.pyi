from manim.constants import *
from _typeshed import Incomplete
from colour import Color
from manim.mobject.svg.svg_mobject import SVGMobject
from manim.utils.tex import TexTemplate
from typing import Iterable

class SingleStringMathTex(SVGMobject):
    organize_left_to_right: Incomplete
    tex_environment: Incomplete
    tex_template: Incomplete
    tex_string: Incomplete
    initial_height: Incomplete
    def __init__(self, tex_string: str, stroke_width: float = ..., should_center: bool = ..., height: float | None = ..., organize_left_to_right: bool = ..., tex_environment: str = ..., tex_template: TexTemplate | None = ..., font_size: float = ..., **kwargs) -> None: ...
    @property
    def font_size(self): ...
    def get_tex_string(self): ...
    def init_colors(self, propagate_colors: bool = ...) -> None: ...

class MathTex(SingleStringMathTex):
    tex_template: Incomplete
    arg_separator: Incomplete
    substrings_to_isolate: Incomplete
    tex_to_color_map: Incomplete
    tex_environment: Incomplete
    brace_notation_split_occurred: bool
    tex_strings: Incomplete
    def __init__(self, *tex_strings, arg_separator: str = ..., substrings_to_isolate: Iterable[str] | None = ..., tex_to_color_map: dict[str, Color] = ..., tex_environment: str = ..., **kwargs) -> None: ...
    def get_parts_by_tex(self, tex, substring: bool = ..., case_sensitive: bool = ...): ...
    def get_part_by_tex(self, tex, **kwargs): ...
    def set_color_by_tex(self, tex, color, **kwargs): ...
    def set_color_by_tex_to_color_map(self, texs_to_color_map, **kwargs): ...
    def index_of_part(self, part): ...
    def index_of_part_by_tex(self, tex, **kwargs): ...
    def sort_alphabetically(self): ...

class Tex(MathTex):
    def __init__(self, *tex_strings, arg_separator: str = ..., tex_environment: str = ..., **kwargs) -> None: ...

class BulletedList(Tex):
    buff: Incomplete
    dot_scale_factor: Incomplete
    tex_environment: Incomplete
    def __init__(self, *items, buff=..., dot_scale_factor: int = ..., tex_environment: Incomplete | None = ..., **kwargs) -> None: ...
    def fade_all_but(self, index_or_string, opacity: float = ...) -> None: ...

class Title(Tex):
    include_underline: Incomplete
    match_underline_width_to_text: Incomplete
    underline_buff: Incomplete
    underline: Incomplete
    def __init__(self, *text_parts, include_underline: bool = ..., match_underline_width_to_text: bool = ..., underline_buff=..., **kwargs) -> None: ...

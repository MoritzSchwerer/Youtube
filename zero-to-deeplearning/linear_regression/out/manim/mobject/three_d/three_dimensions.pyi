from typing import *
from manim.constants import *
from manim.mobject.mobject import *
from manim.utils.color import *
import numpy as np
from _typeshed import Incomplete
from colour import Color
from manim.mobject.opengl.opengl_compatibility import ConvertToOpenGL
from manim.mobject.types.vectorized_mobject import VGroup, VMobject
from manim.utils.color import Colors

class ThreeDVMobject(VMobject, metaclass=ConvertToOpenGL):
    def __init__(self, shade_in_3d: bool = ..., **kwargs) -> None: ...

class Surface(VGroup, metaclass=ConvertToOpenGL):
    u_range: Incomplete
    v_range: Incomplete
    resolution: Incomplete
    surface_piece_config: Incomplete
    fill_color: Incomplete
    fill_opacity: Incomplete
    checkerboard_colors: Incomplete
    stroke_color: Incomplete
    stroke_width: Incomplete
    should_make_jagged: Incomplete
    pre_function_handle_to_anchor_scale_factor: Incomplete
    def __init__(self, func: Callable[[float, float], np.ndarray], u_range: Sequence[float] = ..., v_range: Sequence[float] = ..., resolution: Sequence[int] = ..., surface_piece_config: dict = ..., fill_color: Color = ..., fill_opacity: float = ..., checkerboard_colors: Sequence[Color] = ..., stroke_color: Color = ..., stroke_width: float = ..., should_make_jagged: bool = ..., pre_function_handle_to_anchor_scale_factor: float = ..., **kwargs) -> None: ...
    def func(self, u: float, v: float): ...
    def set_fill_by_checkerboard(self, *colors, opacity: Incomplete | None = ...): ...
    def set_fill_by_value(self, axes: Mobject, colorscale: Union[Iterable[Color], Color] | None = ..., axis: int = ..., **kwargs): ...

class Sphere(Surface):
    radius: Incomplete
    def __init__(self, center=..., radius: int = ..., resolution: Incomplete | None = ..., u_range=..., v_range=..., **kwargs) -> None: ...
    def func(self, u, v): ...

class Dot3D(Sphere):
    def __init__(self, point: list | np.ndarray = ..., radius: float = ..., color: Colors = ..., resolution=..., **kwargs) -> None: ...

class Cube(VGroup):
    side_length: Incomplete
    def __init__(self, side_length: int = ..., fill_opacity: float = ..., fill_color=..., stroke_width: int = ..., **kwargs) -> None: ...
    def generate_points(self) -> None: ...
    init_points = generate_points

class Prism(Cube):
    dimensions: Incomplete
    def __init__(self, dimensions=..., **kwargs) -> None: ...
    def generate_points(self) -> None: ...

class Cone(Surface):
    direction: Incomplete
    theta: Incomplete
    base_circle: Incomplete
    def __init__(self, base_radius: float = ..., height: float = ..., direction: np.ndarray = ..., show_base: bool = ..., v_range: Sequence[float] = ..., u_min: float = ..., checkerboard_colors: bool = ..., **kwargs) -> None: ...
    def func(self, u: float, v: float): ...
    def set_direction(self, direction) -> None: ...
    def get_direction(self): ...

class Cylinder(Surface):
    radius: Incomplete
    def __init__(self, radius: float = ..., height: float = ..., direction: np.ndarray = ..., v_range: Sequence[float] = ..., show_ends: bool = ..., resolution=..., **kwargs) -> None: ...
    def func(self, u: float, v: float): ...
    base_top: Incomplete
    base_bottom: Incomplete
    def add_bases(self) -> None: ...
    direction: Incomplete
    def set_direction(self, direction) -> None: ...
    def get_direction(self): ...

class Line3D(Cylinder):
    thickness: Incomplete
    def __init__(self, start: np.ndarray = ..., end: np.ndarray = ..., thickness: float = ..., color: Incomplete | None = ..., **kwargs) -> None: ...
    vect: Incomplete
    length: Incomplete
    direction: Incomplete
    start: Incomplete
    end: Incomplete
    def set_start_and_end_attrs(self, start, end, **kwargs) -> None: ...
    def pointify(self, mob_or_point, direction: Incomplete | None = ...): ...
    def get_start(self): ...
    def get_end(self): ...
    @classmethod
    def parallel_to(cls, line: Line3D, point: Sequence[float] = ..., length: float = ..., **kwargs): ...
    @classmethod
    def perpendicular_to(cls, line: Line3D, point: Sequence[float] = ..., length: float = ..., **kwargs): ...

class Arrow3D(Line3D):
    length: Incomplete
    cone: Incomplete
    def __init__(self, start: np.ndarray = ..., end: np.ndarray = ..., thickness: float = ..., height: float = ..., base_radius: float = ..., color=..., **kwargs) -> None: ...

class Torus(Surface):
    R: Incomplete
    r: Incomplete
    def __init__(self, major_radius: float = ..., minor_radius: float = ..., u_range=..., v_range=..., resolution: Incomplete | None = ..., **kwargs) -> None: ...
    def func(self, u, v): ...

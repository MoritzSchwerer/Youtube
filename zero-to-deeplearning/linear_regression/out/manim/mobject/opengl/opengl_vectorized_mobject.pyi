from manim.constants import *
from manim.utils.color import *
import numpy as np
from _typeshed import Incomplete
from colour import Color
from manim import config as config
from manim.mobject.opengl.opengl_mobject import OpenGLMobject as OpenGLMobject, OpenGLPoint as OpenGLPoint
from manim.renderer.shader_wrapper import ShaderWrapper as ShaderWrapper
from manim.utils.bezier import bezier as bezier, get_quadratic_approximation_of_cubic as get_quadratic_approximation_of_cubic, get_smooth_cubic_bezier_handle_points as get_smooth_cubic_bezier_handle_points, integer_interpolate as integer_interpolate, interpolate as interpolate, partial_quadratic_bezier_points as partial_quadratic_bezier_points, proportions_along_bezier_curve_for_point as proportions_along_bezier_curve_for_point, quadratic_bezier_remap as quadratic_bezier_remap
from manim.utils.iterables import listify as listify, make_even as make_even, resize_with_interpolation as resize_with_interpolation
from manim.utils.space_ops import angle_between_vectors as angle_between_vectors, cross2d as cross2d, earclip_triangulation as earclip_triangulation, get_unit_normal as get_unit_normal, shoelace_direction as shoelace_direction, z_to_vector as z_to_vector
from typing import Callable, Iterable, Sequence

def triggers_refreshed_triangulation(func): ...

class OpenGLVMobject(OpenGLMobject):
    fill_dtype: Incomplete
    stroke_dtype: Incomplete
    stroke_shader_folder: str
    fill_shader_folder: str
    fill_rgba: Incomplete
    stroke_rgba: Incomplete
    stroke_width: Incomplete
    unit_normal: Incomplete
    data: Incomplete
    fill_opacity: Incomplete
    stroke_opacity: Incomplete
    draw_stroke_behind_fill: Incomplete
    pre_function_handle_to_anchor_scale_factor: Incomplete
    make_smooth_after_applying_functions: Incomplete
    background_image_file: Incomplete
    tolerance_for_point_equality: Incomplete
    n_points_per_curve: Incomplete
    long_lines: Incomplete
    should_subdivide_sharp_curves: Incomplete
    should_remove_null_curves: Incomplete
    joint_type: Incomplete
    flat_stroke: Incomplete
    render_primitive: Incomplete
    triangulation_locked: Incomplete
    needs_new_triangulation: bool
    triangulation: Incomplete
    orientation: int
    fill_data: Incomplete
    stroke_data: Incomplete
    fill_shader_wrapper: Incomplete
    stroke_shader_wrapper: Incomplete
    fill_color: Incomplete
    stroke_color: Incomplete
    def __init__(self, fill_color: Color | None = ..., fill_opacity: float = ..., stroke_color: Color | None = ..., stroke_opacity: float = ..., stroke_width: float = ..., draw_stroke_behind_fill: bool = ..., pre_function_handle_to_anchor_scale_factor: float = ..., make_smooth_after_applying_functions: float = ..., background_image_file: str | None = ..., tolerance_for_point_equality: float = ..., n_points_per_curve: int = ..., long_lines: bool = ..., should_subdivide_sharp_curves: bool = ..., should_remove_null_curves: bool = ..., joint_type: LineJointType | None = ..., flat_stroke: bool = ..., render_primitive=..., triangulation_locked: bool = ..., **kwargs) -> None: ...
    def get_group_class(self): ...
    @staticmethod
    def get_mobject_type_class(): ...
    def init_data(self) -> None: ...
    def init_colors(self): ...
    def set_fill(self, color: Color | None = ..., opacity: float | None = ..., recurse: bool = ...) -> OpenGLVMobject: ...
    def set_stroke(self, color: Incomplete | None = ..., width: Incomplete | None = ..., opacity: Incomplete | None = ..., background: Incomplete | None = ..., recurse: bool = ...): ...
    def set_style(self, fill_color: Incomplete | None = ..., fill_opacity: Incomplete | None = ..., fill_rgba: Incomplete | None = ..., stroke_color: Incomplete | None = ..., stroke_opacity: Incomplete | None = ..., stroke_rgba: Incomplete | None = ..., stroke_width: Incomplete | None = ..., gloss: Incomplete | None = ..., shadow: Incomplete | None = ..., recurse: bool = ...): ...
    def get_style(self): ...
    def match_style(self, vmobject, recurse: bool = ...): ...
    opacity: Incomplete
    def set_color(self, color, opacity: Incomplete | None = ..., recurse: bool = ...): ...
    def set_opacity(self, opacity, recurse: bool = ...): ...
    def fade(self, darkness: float = ..., recurse: bool = ...): ...
    def get_fill_colors(self): ...
    def get_fill_opacities(self): ...
    def get_stroke_colors(self): ...
    def get_stroke_opacities(self): ...
    def get_stroke_widths(self): ...
    def get_fill_color(self): ...
    def get_fill_opacity(self): ...
    def get_stroke_color(self): ...
    def get_stroke_width(self): ...
    def get_stroke_opacity(self): ...
    def get_color(self): ...
    def get_colors(self): ...
    color: Incomplete
    def has_stroke(self): ...
    def has_fill(self): ...
    def get_opacity(self): ...
    def set_flat_stroke(self, flat_stroke: bool = ..., recurse: bool = ...): ...
    def get_flat_stroke(self): ...
    def set_anchors_and_handles(self, anchors1, handles, anchors2): ...
    def start_new_path(self, point): ...
    def add_cubic_bezier_curve(self, anchor1, handle1, handle2, anchor2) -> None: ...
    def add_cubic_bezier_curve_to(self, handle1, handle2, anchor) -> None: ...
    def add_quadratic_bezier_curve_to(self, handle, anchor) -> None: ...
    def add_line_to(self, point: Sequence[float]) -> OpenGLVMobject: ...
    def add_smooth_curve_to(self, point): ...
    def add_smooth_cubic_curve_to(self, handle, point) -> None: ...
    def has_new_path_started(self): ...
    def get_last_point(self): ...
    def get_reflection_of_last_handle(self): ...
    def close_path(self) -> None: ...
    def is_closed(self): ...
    def subdivide_sharp_curves(self, angle_threshold=..., recurse: bool = ...): ...
    def add_points_as_corners(self, points): ...
    def set_points_as_corners(self, points: Iterable[float]) -> OpenGLVMobject: ...
    def set_points_smoothly(self, points, true_smooth: bool = ...): ...
    def change_anchor_mode(self, mode): ...
    def make_smooth(self): ...
    def make_approximately_smooth(self): ...
    def make_jagged(self): ...
    def add_subpath(self, points): ...
    def append_vectorized_mobject(self, vectorized_mobject): ...
    def consider_points_equals(self, p0, p1): ...
    def force_direction(self, target_direction: str): ...
    def reverse_direction(self): ...
    def get_bezier_tuples_from_points(self, points): ...
    def get_bezier_tuples(self): ...
    def get_subpaths_from_points(self, points): ...
    def get_subpaths(self): ...
    def get_nth_curve_points(self, n: int) -> np.ndarray: ...
    def get_nth_curve_function(self, n: int) -> Callable[[float], np.ndarray]: ...
    def get_nth_curve_function_with_length(self, n: int, sample_points: int | None = ...) -> tuple[Callable[[float], np.ndarray], float]: ...
    def get_num_curves(self) -> int: ...
    def get_nth_curve_length(self, n: int, sample_points: int | None = ...) -> float: ...
    def get_curve_functions(self) -> Iterable[Callable[[float], np.ndarray]]: ...
    def get_nth_curve_length_pieces(self, n: int, sample_points: int | None = ...) -> np.ndarray: ...
    def get_curve_functions_with_lengths(self, **kwargs) -> Iterable[tuple[Callable[[float], np.ndarray], float]]: ...
    def point_from_proportion(self, alpha: float) -> np.ndarray: ...
    def proportion_from_point(self, point: Iterable[float | int]) -> float: ...
    def get_anchors_and_handles(self): ...
    def get_start_anchors(self) -> np.ndarray: ...
    def get_end_anchors(self) -> np.ndarray: ...
    def get_anchors(self) -> np.ndarray: ...
    def get_points_without_null_curves(self, atol: float = ...): ...
    def get_arc_length(self, sample_points_per_curve: int | None = ...) -> float: ...
    def get_area_vector(self): ...
    def get_direction(self): ...
    def get_unit_normal(self, recompute: bool = ...): ...
    def refresh_unit_normal(self): ...
    def align_points(self, vmobject): ...
    def insert_n_curves(self, n: int, recurse: bool = ...) -> OpenGLVMobject: ...
    def insert_n_curves_to_point_list(self, n: int, points: np.ndarray) -> np.ndarray: ...
    def interpolate(self, mobject1, mobject2, alpha, *args, **kwargs): ...
    def pointwise_become_partial(self, vmobject: OpenGLVMobject, a: float, b: float, remap: bool = ...) -> OpenGLVMobject: ...
    def get_subcurve(self, a: float, b: float) -> OpenGLVMobject: ...
    def refresh_triangulation(self): ...
    def get_triangulation(self, normal_vector: Incomplete | None = ...): ...
    def set_points(self, points): ...
    def set_data(self, data): ...
    def apply_function(self, function, make_smooth: bool = ..., **kwargs): ...
    def apply_points_function(self, *args, **kwargs): ...
    def flip(self, *args, **kwargs): ...
    def init_shader_data(self) -> None: ...
    def refresh_shader_wrapper_id(self): ...
    def get_fill_shader_wrapper(self): ...
    def update_fill_shader_wrapper(self) -> None: ...
    def get_stroke_shader_wrapper(self): ...
    def update_stroke_shader_wrapper(self) -> None: ...
    def get_shader_wrapper_list(self): ...
    def get_stroke_uniforms(self): ...
    def get_fill_uniforms(self): ...
    def get_stroke_shader_data(self): ...
    def get_fill_shader_data(self): ...
    def refresh_shader_data(self) -> None: ...
    def get_fill_shader_vert_indices(self): ...

class OpenGLVGroup(OpenGLVMobject):
    def __init__(self, *vmobjects, **kwargs) -> None: ...
    def add(self, *vmobjects: OpenGLVMobject): ...
    def __add__(self, vmobject): ...
    def __iadd__(self, vmobject): ...
    def __sub__(self, vmobject): ...
    def __isub__(self, vmobject): ...
    def __setitem__(self, key: int, value: OpenGLVMobject | Sequence[OpenGLVMobject]): ...

class OpenGLVectorizedPoint(OpenGLPoint, OpenGLVMobject):
    artificial_width: Incomplete
    artificial_height: Incomplete
    def __init__(self, location=..., color=..., fill_opacity: int = ..., stroke_width: int = ..., artificial_width: float = ..., artificial_height: float = ..., **kwargs) -> None: ...

class OpenGLCurvesAsSubmobjects(OpenGLVGroup):
    def __init__(self, vmobject, **kwargs) -> None: ...

class OpenGLDashedVMobject(OpenGLVMobject):
    dashed_ratio: Incomplete
    num_dashes: Incomplete
    def __init__(self, vmobject: OpenGLVMobject, num_dashes: int = ..., dashed_ratio: float = ..., color: Color = ..., **kwargs) -> None: ...

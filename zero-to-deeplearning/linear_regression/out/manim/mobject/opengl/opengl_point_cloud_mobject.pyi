from manim.constants import *
from _typeshed import Incomplete
from manim.mobject.opengl.opengl_mobject import OpenGLMobject

class OpenGLPMobject(OpenGLMobject):
    shader_folder: str
    OPENGL_POINT_RADIUS_SCALE_FACTOR: float
    shader_dtype: Incomplete
    point_radius: Incomplete
    stroke_width: Incomplete
    def __init__(self, stroke_width: float = ..., color=..., render_primitive=..., **kwargs) -> None: ...
    rgbas: Incomplete
    points: Incomplete
    def reset_points(self): ...
    def get_array_attrs(self): ...
    def add_points(self, points, rgbas: Incomplete | None = ..., color: Incomplete | None = ..., opacity: Incomplete | None = ...): ...
    def thin_out(self, factor: int = ...): ...
    def set_color_by_gradient(self, *colors): ...
    def set_colors_by_radial_gradient(self, center: Incomplete | None = ..., radius: int = ..., inner_color=..., outer_color=...): ...
    def match_colors(self, pmobject): ...
    def fade_to(self, color, alpha, family: bool = ...): ...
    def filter_out(self, condition): ...
    def sort_points(self, function=...): ...
    def ingest_submobjects(self): ...
    def point_from_proportion(self, alpha): ...
    def pointwise_become_partial(self, pmobject, a, b): ...
    def get_shader_data(self): ...
    @staticmethod
    def get_mobject_type_class(): ...

class OpenGLPGroup(OpenGLPMobject):
    def __init__(self, *pmobs, **kwargs) -> None: ...
    def fade_to(self, color, alpha, family: bool = ...) -> None: ...

class OpenGLPMPoint(OpenGLPMobject):
    location: Incomplete
    def __init__(self, location=..., stroke_width: float = ..., **kwargs) -> None: ...
    points: Incomplete
    def init_points(self) -> None: ...

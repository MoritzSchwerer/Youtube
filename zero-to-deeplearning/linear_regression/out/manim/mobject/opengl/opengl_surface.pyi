from manim.constants import *
from manim.utils.color import *
from _typeshed import Incomplete
from manim.mobject.opengl.opengl_mobject import OpenGLMobject as OpenGLMobject
from manim.utils.bezier import integer_interpolate as integer_interpolate, interpolate as interpolate
from manim.utils.deprecation import deprecated as deprecated
from manim.utils.images import change_to_rgba_array as change_to_rgba_array, get_full_raster_image_path as get_full_raster_image_path
from manim.utils.iterables import listify as listify
from manim.utils.space_ops import normalize_along_axis as normalize_along_axis
from pathlib import Path
from typing import Iterable

class OpenGLSurface(OpenGLMobject):
    shader_dtype: Incomplete
    shader_folder: str
    passed_uv_func: Incomplete
    u_range: Incomplete
    v_range: Incomplete
    resolution: Incomplete
    axes: Incomplete
    colorscale: Incomplete
    colorscale_axis: Incomplete
    prefered_creation_axis: Incomplete
    epsilon: Incomplete
    triangle_indices: Incomplete
    def __init__(self, uv_func: Incomplete | None = ..., u_range: Incomplete | None = ..., v_range: Incomplete | None = ..., resolution: Incomplete | None = ..., axes: Incomplete | None = ..., color=..., colorscale: Incomplete | None = ..., colorscale_axis: int = ..., opacity: float = ..., gloss: float = ..., shadow: float = ..., prefered_creation_axis: int = ..., epsilon: float = ..., render_primitive=..., depth_test: bool = ..., shader_folder: Incomplete | None = ..., **kwargs) -> None: ...
    def uv_func(self, u, v): ...
    def init_points(self): ...
    def compute_triangle_indices(self) -> None: ...
    def get_triangle_indices(self): ...
    def get_surface_points_and_nudged_points(self): ...
    def get_unit_normals(self): ...
    def pointwise_become_partial(self, smobject, a, b, axis: Incomplete | None = ...): ...
    def get_partial_points_array(self, points, a, b, resolution, axis): ...
    def sort_faces_back_to_front(self, vect=...): ...
    def get_shader_data(self): ...
    def fill_in_shader_color_info(self, shader_data): ...
    def get_shader_vert_indices(self): ...
    def set_fill_by_value(self, axes, colors): ...

class OpenGLSurfaceGroup(OpenGLSurface):
    resolution: Incomplete
    def __init__(self, *parametric_surfaces, resolution: Incomplete | None = ..., **kwargs) -> None: ...
    def init_points(self) -> None: ...

class OpenGLTexturedSurface(OpenGLSurface):
    shader_dtype: Incomplete
    shader_folder: str
    im_coords: Incomplete
    opacity: Incomplete
    num_textures: Incomplete
    uniforms: Incomplete
    uv_surface: Incomplete
    uv_func: Incomplete
    u_range: Incomplete
    v_range: Incomplete
    resolution: Incomplete
    gloss: Incomplete
    def __init__(self, uv_surface: OpenGLSurface, image_file: str | Path, dark_image_file: str | Path = ..., image_mode: str | Iterable[str] = ..., shader_folder: str | Path = ..., **kwargs) -> None: ...
    def get_image_from_file(self, image_file: str | Path, image_mode: str): ...
    def init_data(self) -> None: ...
    def init_points(self) -> None: ...
    def init_colors(self) -> None: ...
    def set_opacity(self, opacity, recurse: bool = ...): ...
    def pointwise_become_partial(self, tsmobject, a, b, axis: int = ...): ...
    def fill_in_shader_color_info(self, shader_data): ...

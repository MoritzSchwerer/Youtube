from manim.constants import *
from manim.utils.color import *
from _typeshed import Incomplete
from manim.mobject.mobject import Mobject as Mobject
from manim.mobject.opengl.opengl_vectorized_mobject import OpenGLDashedVMobject as OpenGLDashedVMobject, OpenGLVGroup as OpenGLVGroup, OpenGLVMobject as OpenGLVMobject
from manim.utils.iterables import adjacent_n_tuples as adjacent_n_tuples, adjacent_pairs as adjacent_pairs
from manim.utils.simple_functions import clip as clip
from manim.utils.space_ops import angle_between_vectors as angle_between_vectors, angle_of_vector as angle_of_vector, compass_directions as compass_directions, find_intersection as find_intersection, normalize as normalize, rotate_vector as rotate_vector, rotation_matrix_transpose as rotation_matrix_transpose

DEFAULT_DOT_RADIUS: float
DEFAULT_SMALL_DOT_RADIUS: float
DEFAULT_DASH_LENGTH: float
DEFAULT_ARROW_TIP_LENGTH: float
DEFAULT_ARROW_TIP_WIDTH: float

class OpenGLTipableVMobject(OpenGLVMobject):
    tip_length: Incomplete
    normal_vector: Incomplete
    tip_config: Incomplete
    def __init__(self, tip_length=..., normal_vector=..., tip_config=..., **kwargs) -> None: ...
    def add_tip(self, at_start: bool = ..., **kwargs): ...
    def create_tip(self, at_start: bool = ..., **kwargs): ...
    def get_unpositioned_tip(self, **kwargs): ...
    def position_tip(self, tip, at_start: bool = ...): ...
    def reset_endpoints_based_on_tip(self, tip, at_start): ...
    start_tip: Incomplete
    tip: Incomplete
    def asign_tip_attr(self, tip, at_start): ...
    def has_tip(self): ...
    def has_start_tip(self): ...
    def pop_tips(self): ...
    def get_tips(self): ...
    def get_tip(self): ...
    def get_default_tip_length(self): ...
    def get_first_handle(self): ...
    def get_last_handle(self): ...
    def get_end(self): ...
    def get_start(self): ...
    def get_length(self): ...

class OpenGLArc(OpenGLTipableVMobject):
    start_angle: Incomplete
    angle: Incomplete
    radius: Incomplete
    n_components: Incomplete
    arc_center: Incomplete
    orientation: int
    def __init__(self, start_angle: int = ..., angle=..., radius: float = ..., n_components: int = ..., arc_center=..., **kwargs) -> None: ...
    def init_points(self) -> None: ...
    @staticmethod
    def create_quadratic_bezier_points(angle, start_angle: int = ..., n_components: int = ...): ...
    def get_arc_center(self): ...
    def get_start_angle(self): ...
    def get_stop_angle(self): ...
    def move_arc_center_to(self, point): ...

class OpenGLArcBetweenPoints(OpenGLArc):
    def __init__(self, start, end, angle=..., **kwargs) -> None: ...

class OpenGLCurvedArrow(OpenGLArcBetweenPoints):
    def __init__(self, start_point, end_point, **kwargs) -> None: ...

class OpenGLCurvedDoubleArrow(OpenGLCurvedArrow):
    def __init__(self, start_point, end_point, **kwargs) -> None: ...

class OpenGLCircle(OpenGLArc):
    def __init__(self, color=..., **kwargs) -> None: ...
    def surround(self, mobject, dim_to_match: int = ..., stretch: bool = ..., buff=...) -> None: ...
    def point_at_angle(self, angle): ...

class OpenGLDot(OpenGLCircle):
    def __init__(self, point=..., radius=..., stroke_width: int = ..., fill_opacity: float = ..., color=..., **kwargs) -> None: ...

class OpenGLEllipse(OpenGLCircle):
    def __init__(self, width: int = ..., height: int = ..., **kwargs) -> None: ...

class OpenGLAnnularSector(OpenGLArc):
    inner_radius: Incomplete
    outer_radius: Incomplete
    def __init__(self, inner_radius: int = ..., outer_radius: int = ..., angle=..., start_angle: int = ..., fill_opacity: int = ..., stroke_width: int = ..., color=..., **kwargs) -> None: ...
    def init_points(self) -> None: ...

class OpenGLSector(OpenGLAnnularSector):
    def __init__(self, outer_radius: int = ..., inner_radius: int = ..., **kwargs) -> None: ...

class OpenGLAnnulus(OpenGLCircle):
    mark_paths_closed: Incomplete
    inner_radius: Incomplete
    outer_radius: Incomplete
    def __init__(self, inner_radius: int = ..., outer_radius: int = ..., fill_opacity: int = ..., stroke_width: int = ..., color=..., mark_paths_closed: bool = ..., **kwargs) -> None: ...
    radius: Incomplete
    def init_points(self) -> None: ...

class OpenGLLine(OpenGLTipableVMobject):
    dim: int
    buff: Incomplete
    path_arc: Incomplete
    def __init__(self, start=..., end=..., buff: int = ..., path_arc: int = ..., **kwargs) -> None: ...
    def init_points(self) -> None: ...
    def set_points_by_ends(self, start, end, buff: int = ..., path_arc: int = ...) -> None: ...
    def set_path_arc(self, new_value) -> None: ...
    def account_for_buff(self, buff): ...
    start: Incomplete
    end: Incomplete
    def set_start_and_end_attrs(self, start, end) -> None: ...
    def pointify(self, mob_or_point, direction: Incomplete | None = ...): ...
    def put_start_and_end_on(self, start, end): ...
    def get_vector(self): ...
    def get_unit_vector(self): ...
    def get_angle(self): ...
    def get_projection(self, point): ...
    def get_slope(self): ...
    def set_angle(self, angle, about_point: Incomplete | None = ...): ...
    def set_length(self, length) -> None: ...

class OpenGLDashedLine(OpenGLLine):
    dashed_ratio: Incomplete
    dash_length: Incomplete
    def __init__(self, *args, dash_length=..., dashed_ratio: float = ..., **kwargs) -> None: ...
    def calculate_num_dashes(self, dashed_ratio): ...
    def get_start(self): ...
    def get_end(self): ...
    def get_first_handle(self): ...
    def get_last_handle(self): ...

class OpenGLTangentLine(OpenGLLine):
    length: Incomplete
    d_alpha: Incomplete
    def __init__(self, vmob, alpha, length: int = ..., d_alpha: float = ..., **kwargs) -> None: ...

class OpenGLElbow(OpenGLVMobject):
    angle: Incomplete
    def __init__(self, width: float = ..., angle: int = ..., **kwargs) -> None: ...

class OpenGLArrow(OpenGLLine):
    thickness: Incomplete
    tip_width_ratio: Incomplete
    tip_angle: Incomplete
    max_tip_length_to_length_ratio: Incomplete
    max_width_to_length_ratio: Incomplete
    def __init__(self, start=..., end=..., path_arc: int = ..., fill_color=..., fill_opacity: int = ..., stroke_width: int = ..., buff=..., thickness: float = ..., tip_width_ratio: int = ..., tip_angle=..., max_tip_length_to_length_ratio: float = ..., max_width_to_length_ratio: float = ..., **kwargs) -> None: ...
    tip_index: Incomplete
    def set_points_by_ends(self, start, end, buff: int = ..., path_arc: int = ...) -> None: ...
    def reset_points_around_ends(self): ...
    def get_start(self): ...
    def get_end(self): ...
    def put_start_and_end_on(self, start, end): ...
    def scale(self, *args, **kwargs): ...
    def set_thickness(self, thickness): ...
    path_arc: Incomplete
    def set_path_arc(self, path_arc): ...

class OpenGLVector(OpenGLArrow):
    buff: Incomplete
    def __init__(self, direction=..., buff: int = ..., **kwargs) -> None: ...

class OpenGLDoubleArrow(OpenGLArrow):
    def __init__(self, *args, **kwargs) -> None: ...

class OpenGLCubicBezier(OpenGLVMobject):
    def __init__(self, a0, h0, h1, a1, **kwargs) -> None: ...

class OpenGLPolygon(OpenGLVMobject):
    vertices: Incomplete
    def __init__(self, *vertices, **kwargs) -> None: ...
    def init_points(self) -> None: ...
    def get_vertices(self): ...
    def round_corners(self, radius: float = ...): ...

class OpenGLRegularPolygon(OpenGLPolygon):
    start_angle: Incomplete
    def __init__(self, n: int = ..., start_angle: Incomplete | None = ..., **kwargs) -> None: ...

class OpenGLTriangle(OpenGLRegularPolygon):
    def __init__(self, **kwargs) -> None: ...

class OpenGLArrowTip(OpenGLTriangle):
    def __init__(self, fill_opacity: int = ..., fill_color=..., stroke_width: int = ..., width=..., length=..., angle: int = ..., **kwargs) -> None: ...
    def get_base(self): ...
    def get_tip_point(self): ...
    def get_vector(self): ...
    def get_angle(self): ...
    def get_length(self): ...

class OpenGLRectangle(OpenGLPolygon):
    def __init__(self, color=..., width: float = ..., height: float = ..., **kwargs) -> None: ...

class OpenGLSquare(OpenGLRectangle):
    side_length: Incomplete
    def __init__(self, side_length: float = ..., **kwargs) -> None: ...

class OpenGLRoundedRectangle(OpenGLRectangle):
    corner_radius: Incomplete
    def __init__(self, corner_radius: float = ..., **kwargs) -> None: ...

from ..constants import *
import numpy as np
from ..mobject.mobject import Mobject
from ..scene.scene import Scene
from ..utils.color import BLUE_D, GREEN_C, RED_C
from _typeshed import Incomplete
from colour import Color
from manim.mobject.geometry.line import Arrow, Vector
from manim.mobject.text.tex_mobject import MathTex, Tex
from typing import Callable

X_COLOR = GREEN_C
Y_COLOR = RED_C
Z_COLOR = BLUE_D

class VectorScene(Scene):
    basis_vector_stroke_width: Incomplete
    def __init__(self, basis_vector_stroke_width: int = ..., **kwargs) -> None: ...
    def add_plane(self, animate: bool = ..., **kwargs): ...
    def add_axes(self, animate: bool = ..., color: bool = ..., **kwargs): ...
    def lock_in_faded_grid(self, dimness: float = ..., axes_dimness: float = ...): ...
    def get_vector(self, numerical_vector: np.ndarray | list | tuple, **kwargs): ...
    def add_vector(self, vector: Arrow | list | tuple | np.ndarray, color: str = ..., animate: bool = ..., **kwargs): ...
    def write_vector_coordinates(self, vector: Arrow, **kwargs): ...
    def get_basis_vectors(self, i_hat_color: str = ..., j_hat_color: str = ...): ...
    def get_basis_vector_labels(self, **kwargs): ...
    def get_vector_label(self, vector: Vector, label, at_tip: bool = ..., direction: str = ..., rotate: bool = ..., color: str | None = ..., label_scale_factor: float = ...): ...
    def label_vector(self, vector: Vector, label: MathTex | str, animate: bool = ..., **kwargs): ...
    def position_x_coordinate(self, x_coord, x_line, vector): ...
    def position_y_coordinate(self, y_coord, y_line, vector): ...
    def coords_to_vector(self, vector: np.ndarray | list | tuple, coords_start: np.ndarray | list | tuple = ..., clean_up: bool = ...): ...
    def vector_to_coords(self, vector: np.ndarray | list | tuple, integer_labels: bool = ..., clean_up: bool = ...): ...
    def show_ghost_movement(self, vector: Arrow | list | tuple | np.ndarray): ...

class LinearTransformationScene(VectorScene):
    include_background_plane: Incomplete
    include_foreground_plane: Incomplete
    show_coordinates: Incomplete
    show_basis_vectors: Incomplete
    basis_vector_stroke_width: Incomplete
    i_hat_color: Incomplete
    j_hat_color: Incomplete
    leave_ghost_vectors: Incomplete
    background_plane_kwargs: Incomplete
    foreground_plane_kwargs: Incomplete
    def __init__(self, include_background_plane: bool = ..., include_foreground_plane: bool = ..., background_plane_kwargs: dict | None = ..., foreground_plane_kwargs: dict | None = ..., show_coordinates: bool = ..., show_basis_vectors: bool = ..., basis_vector_stroke_width: float = ..., i_hat_color: Color = ..., j_hat_color: Color = ..., leave_ghost_vectors: bool = ..., **kwargs) -> None: ...
    @staticmethod
    def update_default_configs(default_configs, passed_configs) -> None: ...
    has_already_setup: bool
    background_mobjects: Incomplete
    foreground_mobjects: Incomplete
    transformable_mobjects: Incomplete
    moving_vectors: Incomplete
    transformable_labels: Incomplete
    moving_mobjects: Incomplete
    background_plane: Incomplete
    plane: Incomplete
    basis_vectors: Incomplete
    def setup(self) -> None: ...
    def add_special_mobjects(self, mob_list: list, *mobs_to_add: Mobject): ...
    def add_background_mobject(self, *mobjects: Mobject): ...
    def add_foreground_mobject(self, *mobjects: Mobject): ...
    def add_transformable_mobject(self, *mobjects: Mobject): ...
    def add_moving_mobject(self, mobject: Mobject, target_mobject: Mobject | None = ...): ...
    def get_unit_square(self, color: str = ..., opacity: float = ..., stroke_width: float = ...): ...
    square: Incomplete
    def add_unit_square(self, animate: bool = ..., **kwargs): ...
    def add_vector(self, vector: Arrow | list | tuple | np.ndarray, color: str = ..., **kwargs): ...
    def write_vector_coordinates(self, vector: Arrow, **kwargs): ...
    def add_transformable_label(self, vector: Vector, label: MathTex | str, transformation_name: str | MathTex = ..., new_label: str | MathTex | None = ..., **kwargs): ...
    title: Incomplete
    def add_title(self, title: str | MathTex | Tex, scale_factor: float = ..., animate: bool = ...): ...
    def get_matrix_transformation(self, matrix: np.ndarray | list | tuple): ...
    def get_transposed_matrix_transformation(self, transposed_matrix: np.ndarray | list | tuple): ...
    def get_piece_movement(self, pieces: list | tuple | np.ndarray): ...
    def get_moving_mobject_movement(self, func: Callable[[np.ndarray], np.ndarray]): ...
    def get_vector_movement(self, func: Callable[[np.ndarray], np.ndarray]): ...
    def get_transformable_label_movement(self): ...
    def apply_matrix(self, matrix: np.ndarray | list | tuple, **kwargs): ...
    def apply_inverse(self, matrix: np.ndarray | list | tuple, **kwargs): ...
    def apply_transposed_matrix(self, transposed_matrix: np.ndarray | list | tuple, **kwargs): ...
    def apply_inverse_transpose(self, t_matrix: np.ndarray | list | tuple, **kwargs): ...
    def apply_nonlinear_transformation(self, function: Callable[[np.ndarray], np.ndarray], **kwargs): ...
    def apply_function(self, function: Callable[[np.ndarray], np.ndarray], added_anims: list = ..., **kwargs): ...

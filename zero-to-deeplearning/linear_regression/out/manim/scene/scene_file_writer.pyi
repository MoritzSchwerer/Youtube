import numpy as np
from PIL import Image
from _typeshed import Incomplete
from manim.renderer.opengl_renderer import OpenGLRenderer
from pathlib import Path
from pydub import AudioSegment

class SceneFileWriter:
    force_output_as_scene_name: bool
    renderer: Incomplete
    frame_count: int
    partial_movie_files: Incomplete
    subcaptions: Incomplete
    sections: Incomplete
    def __init__(self, renderer, scene_name, **kwargs) -> None: ...
    output_name: Incomplete
    image_file_path: Incomplete
    movie_file_path: Incomplete
    sections_output_dir: Incomplete
    gif_file_path: Incomplete
    partial_movie_directory: Incomplete
    def init_output_directories(self, scene_name) -> None: ...
    def finish_last_section(self) -> None: ...
    def next_section(self, name: str, type: str, skip_animations: bool) -> None: ...
    def add_partial_movie_file(self, hash_animation: str): ...
    def get_resolution_directory(self): ...
    includes_sound: bool
    def init_audio(self) -> None: ...
    audio_segment: Incomplete
    def create_audio_segment(self) -> None: ...
    def add_audio_segment(self, new_segment: AudioSegment, time: float | None = ..., gain_to_background: float | None = ...): ...
    def add_sound(self, sound_file: str, time: float | None = ..., gain: float | None = ..., **kwargs): ...
    def begin_animation(self, allow_write: bool = ..., file_path: Incomplete | None = ...): ...
    def end_animation(self, allow_write: bool = ...): ...
    def write_frame(self, frame_or_renderer: np.ndarray | OpenGLRenderer): ...
    def write_opengl_frame(self, renderer: OpenGLRenderer): ...
    def output_image_from_array(self, frame_data) -> None: ...
    def output_image(self, image: Image.Image, target_dir, ext, zero_pad: bool): ...
    def save_final_image(self, image: np.ndarray): ...
    def finish(self) -> None: ...
    partial_movie_file_path: Incomplete
    writing_process: Incomplete
    def open_movie_pipe(self, file_path: Incomplete | None = ...) -> None: ...
    def close_movie_pipe(self) -> None: ...
    def is_already_cached(self, hash_invocation: str): ...
    def combine_files(self, input_files: list[str], output_file: Path, create_gif: bool = ..., includes_sound: bool = ...): ...
    def combine_to_movie(self) -> None: ...
    def combine_to_section_videos(self) -> None: ...
    def clean_cache(self) -> None: ...
    def flush_cache_directory(self) -> None: ...
    def write_subcaption_file(self) -> None: ...
    def print_file_ready_message(self, file_path) -> None: ...

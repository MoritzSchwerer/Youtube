from _typeshed import Incomplete
from collections.abc import Generator

class Object3D:
    model_matrix: Incomplete
    normal_matrix: Incomplete
    children: Incomplete
    parent: Incomplete
    def __init__(self, *children) -> None: ...
    def interpolate(self, start, end, alpha, _) -> None: ...
    def single_copy(self): ...
    def copy(self): ...
    def add(self, *children) -> None: ...
    def remove(self, *children, current_children_only: bool = ...): ...
    def get_position(self): ...
    def set_position(self, position): ...
    def get_meshes(self) -> Generator[Incomplete, None, None]: ...
    def get_family(self) -> Generator[Incomplete, None, None]: ...
    def align_data_and_family(self, _) -> None: ...
    def hierarchical_model_matrix(self): ...
    def hierarchical_normal_matrix(self): ...
    time_based_updaters: Incomplete
    non_time_updaters: Incomplete
    has_updaters: bool
    updating_suspended: bool
    def init_updaters(self) -> None: ...
    def update(self, dt: int = ...): ...
    def get_time_based_updaters(self): ...
    def has_time_based_updater(self): ...
    def get_updaters(self): ...
    def add_updater(self, update_function, index: Incomplete | None = ..., call_updater: bool = ...): ...
    def remove_updater(self, update_function): ...
    def clear_updaters(self): ...
    def match_updaters(self, mobject): ...
    def suspend_updating(self): ...
    def resume_updating(self, call_updater: bool = ...): ...
    def refresh_has_updater_status(self): ...

class Mesh(Object3D):
    shader: Incomplete
    attributes: Incomplete
    indices: Incomplete
    use_depth_test: Incomplete
    primitive: Incomplete
    skip_render: bool
    def __init__(self, shader: Incomplete | None = ..., attributes: Incomplete | None = ..., geometry: Incomplete | None = ..., material: Incomplete | None = ..., indices: Incomplete | None = ..., use_depth_test: bool = ..., primitive=...) -> None: ...
    def single_copy(self): ...
    def set_uniforms(self, renderer) -> None: ...
    def render(self) -> None: ...

class Shader:
    context: Incomplete
    name: Incomplete
    shader_program: Incomplete
    def __init__(self, context, name: Incomplete | None = ..., source: Incomplete | None = ...) -> None: ...
    def set_uniform(self, name, value) -> None: ...

class FullScreenQuad(Mesh):
    def __init__(self, context, fragment_shader_source: Incomplete | None = ..., fragment_shader_name: Incomplete | None = ...) -> None: ...
    def render(self) -> None: ...

import numpy as np
import typing
from .. import config as config, logger as logger
from ..camera.camera import Camera as Camera
from ..mobject.mobject import Mobject as Mobject
from ..scene.scene_file_writer import SceneFileWriter as SceneFileWriter
from ..utils.exceptions import EndSceneEarlyException as EndSceneEarlyException
from ..utils.iterables import list_update as list_update
from _typeshed import Incomplete
from manim.scene.scene import Scene as Scene
from manim.utils.hashing import get_hash_from_play_call as get_hash_from_play_call

class CairoRenderer:
    camera: Incomplete
    skip_animations: Incomplete
    animations_hashes: Incomplete
    num_plays: int
    time: int
    static_image: Incomplete
    def __init__(self, file_writer_class=..., camera_class: Incomplete | None = ..., skip_animations: bool = ..., **kwargs) -> None: ...
    file_writer: Incomplete
    def init_scene(self, scene) -> None: ...
    def play(self, scene, *args, **kwargs) -> None: ...
    def update_frame(self, scene, mobjects: typing.Iterable[Mobject] | None = ..., include_submobjects: bool = ..., ignore_skipping: bool = ..., **kwargs): ...
    def render(self, scene, time, moving_mobjects) -> None: ...
    def get_frame(self): ...
    def add_frame(self, frame: np.ndarray, num_frames: int = ...): ...
    def freeze_current_frame(self, duration: float): ...
    def show_frame(self) -> None: ...
    def save_static_frame_data(self, scene: Scene, static_mobjects: typing.Iterable[Mobject]) -> typing.Iterable[Mobject] | None: ...
    def update_skipping_status(self) -> None: ...
    def scene_finished(self, scene) -> None: ...

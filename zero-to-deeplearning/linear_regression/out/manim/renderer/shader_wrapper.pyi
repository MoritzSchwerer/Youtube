from .. import logger as logger
from _typeshed import Incomplete
from pathlib import Path

def get_shader_dir(): ...
def find_file(file_name: Path, directories: list[Path]) -> Path: ...

class ShaderWrapper:
    vert_data: Incomplete
    vert_indices: Incomplete
    vert_attributes: Incomplete
    shader_folder: Incomplete
    uniforms: Incomplete
    texture_paths: Incomplete
    depth_test: Incomplete
    render_primitive: Incomplete
    def __init__(self, vert_data: Incomplete | None = ..., vert_indices: Incomplete | None = ..., shader_folder: Incomplete | None = ..., uniforms: Incomplete | None = ..., texture_paths: Incomplete | None = ..., depth_test: bool = ..., render_primitive=...) -> None: ...
    def copy(self): ...
    def is_valid(self): ...
    def get_id(self): ...
    def get_program_id(self): ...
    def create_id(self): ...
    program_id: Incomplete
    id: Incomplete
    def refresh_id(self) -> None: ...
    def create_program_id(self): ...
    program_code: Incomplete
    def init_program_code(self): ...
    def get_program_code(self): ...
    def replace_code(self, old, new) -> None: ...
    def combine_with(self, *shader_wrappers): ...

filename_to_code_map: dict

def get_shader_code_from_file(filename: Path) -> str | None: ...
def get_colormap_code(rgb_list): ...

import typing

def linear(t: float) -> float: ...
def smooth(t: float, inflection: float = ...) -> float: ...
def rush_into(t: float, inflection: float = ...) -> float: ...
def rush_from(t: float, inflection: float = ...) -> float: ...
def slow_into(t: float) -> float: ...
def double_smooth(t: float) -> float: ...
def there_and_back(t: float, inflection: float = ...) -> float: ...
def there_and_back_with_pause(t: float, pause_ratio: float = ...) -> float: ...
def running_start(t: float, pull_factor: float = ...) -> typing.Iterable: ...
def not_quite_there(func: typing.Callable[[float], float] = ..., proportion: float = ...) -> typing.Callable[[float], float]: ...
def wiggle(t: float, wiggles: float = ...) -> float: ...
def squish_rate_func(func: typing.Callable[[float], float], a: float = ..., b: float = ...) -> typing.Callable[[float], float]: ...
def lingering(t: float) -> float: ...
def exponential_decay(t: float, half_life: float = ...) -> float: ...

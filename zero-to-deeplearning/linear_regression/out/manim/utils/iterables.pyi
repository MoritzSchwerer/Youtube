import numpy as np
from typing import Collection, Iterable, Reversible, Sequence

def adjacent_n_tuples(objects: Sequence, n: int) -> zip: ...
def adjacent_pairs(objects: Sequence) -> zip: ...
def all_elements_are_instances(iterable: Iterable, Class) -> bool: ...
def concatenate_lists(*list_of_lists: Iterable) -> list: ...
def list_difference_update(l1: Iterable, l2: Iterable) -> list: ...
def list_update(l1: Iterable, l2: Iterable) -> list: ...
def listify(obj) -> list: ...
def make_even(iterable_1: Iterable, iterable_2: Iterable) -> tuple[list, list]: ...
def make_even_by_cycling(iterable_1: Collection, iterable_2: Collection) -> tuple[list, list]: ...
def remove_list_redundancies(lst: Reversible) -> list: ...
def remove_nones(sequence: Iterable) -> list: ...
def stretch_array_to_length(nparray: np.ndarray, length: int) -> np.ndarray: ...
def tuplify(obj) -> tuple: ...

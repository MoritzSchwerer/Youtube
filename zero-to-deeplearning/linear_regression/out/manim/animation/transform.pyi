import numpy as np
import types
from ..animation.animation import Animation
from ..mobject.mobject import Group, Mobject
from ..scene.scene import Scene
from _typeshed import Incomplete
from typing import Any, Callable, Iterable, Sequence

class Transform(Animation):
    path_arc_axis: Incomplete
    path_arc_centers: Incomplete
    replace_mobject_with_target_in_scene: Incomplete
    target_mobject: Incomplete
    def __init__(self, mobject: Mobject | None, target_mobject: Mobject | None = ..., path_func: Callable | None = ..., path_arc: float = ..., path_arc_axis: np.ndarray = ..., path_arc_centers: np.ndarray = ..., replace_mobject_with_target_in_scene: bool = ..., **kwargs) -> None: ...
    @property
    def path_arc(self) -> float: ...
    @property
    def path_func(self) -> Callable[[Iterable[np.ndarray], Iterable[np.ndarray], float], Iterable[np.ndarray]]: ...
    target_copy: Incomplete
    def begin(self) -> None: ...
    def create_target(self) -> Mobject: ...
    def clean_up_from_scene(self, scene: Scene) -> None: ...
    def get_all_mobjects(self) -> Sequence[Mobject]: ...
    def get_all_families_zipped(self) -> Iterable[tuple]: ...
    def interpolate_submobject(self, submobject: Mobject, starting_submobject: Mobject, target_copy: Mobject, alpha: float) -> Transform: ...

class ReplacementTransform(Transform):
    def __init__(self, mobject: Mobject, target_mobject: Mobject, **kwargs) -> None: ...

class TransformFromCopy(Transform):
    def __init__(self, mobject: Mobject, target_mobject: Mobject, **kwargs) -> None: ...
    def interpolate(self, alpha: float) -> None: ...

class ClockwiseTransform(Transform):
    def __init__(self, mobject: Mobject, target_mobject: Mobject, path_arc: float = ..., **kwargs) -> None: ...

class CounterclockwiseTransform(Transform):
    def __init__(self, mobject: Mobject, target_mobject: Mobject, path_arc: float = ..., **kwargs) -> None: ...

class MoveToTarget(Transform):
    def __init__(self, mobject: Mobject, **kwargs) -> None: ...
    def check_validity_of_input(self, mobject: Mobject) -> None: ...

class _MethodAnimation(MoveToTarget):
    methods: Incomplete
    def __init__(self, mobject, methods) -> None: ...
    def finish(self) -> None: ...

class ApplyMethod(Transform):
    method: Incomplete
    method_args: Incomplete
    def __init__(self, method: Callable, *args, **kwargs) -> None: ...
    def check_validity_of_input(self, method: Callable) -> None: ...
    def create_target(self) -> Mobject: ...

class ApplyPointwiseFunction(ApplyMethod):
    def __init__(self, function: types.MethodType, mobject: Mobject, run_time: float = ..., **kwargs) -> None: ...

class ApplyPointwiseFunctionToCenter(ApplyPointwiseFunction):
    function: Incomplete
    def __init__(self, function: types.MethodType, mobject: Mobject, **kwargs) -> None: ...
    method_args: Incomplete
    def begin(self) -> None: ...

class FadeToColor(ApplyMethod):
    def __init__(self, mobject: Mobject, color: str, **kwargs) -> None: ...

class ScaleInPlace(ApplyMethod):
    def __init__(self, mobject: Mobject, scale_factor: float, **kwargs) -> None: ...

class ShrinkToCenter(ScaleInPlace):
    def __init__(self, mobject: Mobject, **kwargs) -> None: ...

class Restore(ApplyMethod):
    def __init__(self, mobject: Mobject, **kwargs) -> None: ...

class ApplyFunction(Transform):
    function: Incomplete
    def __init__(self, function: types.MethodType, mobject: Mobject, **kwargs) -> None: ...
    def create_target(self) -> Any: ...

class ApplyMatrix(ApplyPointwiseFunction):
    def __init__(self, matrix: np.ndarray, mobject: Mobject, about_point: np.ndarray = ..., **kwargs) -> None: ...
    def initialize_matrix(self, matrix: np.ndarray) -> np.ndarray: ...

class ApplyComplexFunction(ApplyMethod):
    function: Incomplete
    def __init__(self, function: types.MethodType, mobject: Mobject, **kwargs) -> None: ...

class CyclicReplace(Transform):
    group: Incomplete
    def __init__(self, *mobjects: Mobject, path_arc: float = ..., **kwargs) -> None: ...
    def create_target(self) -> Group: ...

class Swap(CyclicReplace): ...

class TransformAnimations(Transform):
    start_anim: Incomplete
    end_anim: Incomplete
    run_time: Incomplete
    def __init__(self, start_anim: Animation, end_anim: Animation, rate_func: Callable = ..., **kwargs) -> None: ...
    def interpolate(self, alpha: float) -> None: ...

class FadeTransform(Transform):
    to_add_on_completion: Incomplete
    stretch: Incomplete
    dim_to_match: Incomplete
    def __init__(self, mobject, target_mobject, stretch: bool = ..., dim_to_match: int = ..., **kwargs) -> None: ...
    ending_mobject: Incomplete
    def begin(self) -> None: ...
    def ghost_to(self, source, target) -> None: ...
    def get_all_mobjects(self) -> Sequence[Mobject]: ...
    def get_all_families_zipped(self): ...
    def clean_up_from_scene(self, scene) -> None: ...

class FadeTransformPieces(FadeTransform):
    def begin(self) -> None: ...
    def ghost_to(self, source, target) -> None: ...

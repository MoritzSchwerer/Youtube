from ..mobject.mobject import Mobject
from _typeshed import Incomplete
from manim.scene.scene import Scene
from typing import Callable, Iterable, Sequence

class Animation:
    def __new__(cls, mobject: Incomplete | None = ..., *args, use_override: bool = ..., **kwargs): ...
    run_time: Incomplete
    rate_func: Incomplete
    reverse_rate_function: Incomplete
    name: Incomplete
    remover: Incomplete
    introducer: Incomplete
    suspend_mobject_updating: Incomplete
    lag_ratio: Incomplete
    starting_mobject: Incomplete
    mobject: Incomplete
    def __init__(self, mobject: Mobject | None, lag_ratio: float = ..., run_time: float = ..., rate_func: Callable[[float], float] = ..., reverse_rate_function: bool = ..., name: str = ..., remover: bool = ..., suspend_mobject_updating: bool = ..., introducer: bool = ..., *, _on_finish: Callable[[], None] = ..., **kwargs) -> None: ...
    def begin(self) -> None: ...
    def finish(self) -> None: ...
    def clean_up_from_scene(self, scene: Scene) -> None: ...
    def create_starting_mobject(self) -> Mobject: ...
    def get_all_mobjects(self) -> Sequence[Mobject]: ...
    def get_all_families_zipped(self) -> Iterable[tuple]: ...
    def update_mobjects(self, dt: float) -> None: ...
    def get_all_mobjects_to_update(self) -> list[Mobject]: ...
    def copy(self) -> Animation: ...
    def interpolate(self, alpha: float) -> None: ...
    def interpolate_mobject(self, alpha: float) -> None: ...
    def interpolate_submobject(self, submobject: Mobject, starting_submobject: Mobject, alpha: float) -> Animation: ...
    def get_sub_alpha(self, alpha: float, index: int, num_submobjects: int) -> float: ...
    def set_run_time(self, run_time: float) -> Animation: ...
    def get_run_time(self) -> float: ...
    def set_rate_func(self, rate_func: Callable[[float], float]) -> Animation: ...
    def get_rate_func(self) -> Callable[[float], float]: ...
    def set_name(self, name: str) -> Animation: ...
    def is_remover(self) -> bool: ...
    def is_introducer(self) -> bool: ...

class Wait(Animation):
    duration: Incomplete
    stop_condition: Incomplete
    is_static_wait: Incomplete
    def __init__(self, run_time: float = ..., stop_condition: Callable[[], bool] | None = ..., frozen_frame: bool | None = ..., rate_func: Callable[[float], float] = ..., **kwargs) -> None: ...
    def begin(self) -> None: ...
    def finish(self) -> None: ...
    def clean_up_from_scene(self, scene: Scene) -> None: ...
    def update_mobjects(self, dt: float) -> None: ...
    def interpolate(self, alpha: float) -> None: ...

def override_animation(animation_class: type[Animation]) -> Callable[[Callable], Callable]: ...

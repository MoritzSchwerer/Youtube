import numpy as np
from ..animation.animation import Animation
from ..animation.composition import Succession
from ..mobject.mobject import Mobject
from ..mobject.types.vectorized_mobject import VMobject
from _typeshed import Incomplete
from colour import Color
from manim.mobject.opengl.opengl_surface import OpenGLSurface
from manim.mobject.opengl.opengl_vectorized_mobject import OpenGLVMobject
from manim.mobject.text.text_mobject import Text
from typing import Callable, Iterable, Sequence

class ShowPartial(Animation):
    def __init__(self, mobject: VMobject | OpenGLVMobject | OpenGLSurface | None, **kwargs) -> None: ...
    def interpolate_submobject(self, submobject: Mobject, starting_submobject: Mobject, alpha: float) -> None: ...

class Create(ShowPartial):
    def __init__(self, mobject: VMobject | OpenGLVMobject | OpenGLSurface, lag_ratio: float = ..., introducer: bool = ..., **kwargs) -> None: ...

class Uncreate(Create):
    def __init__(self, mobject: VMobject | OpenGLVMobject, reverse_rate_function: bool = ..., remover: bool = ..., **kwargs) -> None: ...

class DrawBorderThenFill(Animation):
    stroke_width: Incomplete
    stroke_color: Incomplete
    draw_border_animation_config: Incomplete
    fill_animation_config: Incomplete
    outline: Incomplete
    def __init__(self, vmobject: VMobject | OpenGLVMobject, run_time: float = ..., rate_func: Callable[[float], float] = ..., stroke_width: float = ..., stroke_color: str = ..., draw_border_animation_config: dict = ..., fill_animation_config: dict = ..., introducer: bool = ..., **kwargs) -> None: ...
    def begin(self) -> None: ...
    def get_outline(self) -> Mobject: ...
    def get_stroke_color(self, vmobject: VMobject | OpenGLVMobject) -> Color: ...
    def get_all_mobjects(self) -> Sequence[Mobject]: ...
    def interpolate_submobject(self, submobject: Mobject, starting_submobject: Mobject, outline, alpha: float) -> None: ...

class Write(DrawBorderThenFill):
    reverse: Incomplete
    def __init__(self, vmobject: VMobject | OpenGLVMobject, rate_func: Callable[[float], float] = ..., reverse: bool = ..., **kwargs) -> None: ...
    def reverse_submobjects(self) -> None: ...
    def begin(self) -> None: ...
    def finish(self) -> None: ...

class Unwrite(Write):
    def __init__(self, vmobject: VMobject, rate_func: Callable[[float], float] = ..., reverse: bool = ..., **kwargs) -> None: ...

class SpiralIn(Animation):
    shapes: Incomplete
    scale_factor: Incomplete
    shape_center: Incomplete
    fade_in_fraction: Incomplete
    def __init__(self, shapes: Mobject, scale_factor: float = ..., fade_in_fraction: float = ..., **kwargs) -> None: ...
    def interpolate_mobject(self, alpha: float) -> None: ...

class ShowIncreasingSubsets(Animation):
    all_submobs: Incomplete
    int_func: Incomplete
    def __init__(self, group: Mobject, suspend_mobject_updating: bool = ..., int_func: Callable[[np.ndarray], np.ndarray] = ..., reverse_rate_function: bool = ..., **kwargs) -> None: ...
    def interpolate_mobject(self, alpha: float) -> None: ...
    def update_submobject_list(self, index: int) -> None: ...

class AddTextLetterByLetter(ShowIncreasingSubsets):
    time_per_char: Incomplete
    def __init__(self, text: Text, suspend_mobject_updating: bool = ..., int_func: Callable[[np.ndarray], np.ndarray] = ..., rate_func: Callable[[float], float] = ..., time_per_char: float = ..., run_time: float | None = ..., reverse_rate_function: bool = ..., introducer: bool = ..., **kwargs) -> None: ...

class RemoveTextLetterByLetter(AddTextLetterByLetter):
    def __init__(self, text: Text, suspend_mobject_updating: bool = ..., int_func: Callable[[np.ndarray], np.ndarray] = ..., rate_func: Callable[[float], float] = ..., time_per_char: float = ..., run_time: float | None = ..., reverse_rate_function: bool = ..., introducer: bool = ..., remover: bool = ..., **kwargs) -> None: ...

class ShowSubmobjectsOneByOne(ShowIncreasingSubsets):
    def __init__(self, group: Iterable[Mobject], int_func: Callable[[np.ndarray], np.ndarray] = ..., **kwargs) -> None: ...
    def update_submobject_list(self, index: int) -> None: ...

class AddTextWordByWord(Succession):
    time_per_char: Incomplete
    def __init__(self, text_mobject: Text, run_time: float = ..., time_per_char: float = ..., **kwargs) -> None: ...

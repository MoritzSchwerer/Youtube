from ..mobject.mobject import Mobject
from ..scene.scene import Scene
from .composition import AnimationGroup
from _typeshed import Incomplete

class TransformMatchingAbstractBase(AnimationGroup):
    to_remove: Incomplete
    to_add: Incomplete
    def __init__(self, mobject: Mobject, target_mobject: Mobject, transform_mismatches: bool = ..., fade_transform_mismatches: bool = ..., key_map: dict | None = ..., **kwargs) -> None: ...
    def get_shape_map(self, mobject: Mobject) -> dict: ...
    def clean_up_from_scene(self, scene: Scene) -> None: ...
    @staticmethod
    def get_mobject_parts(mobject: Mobject): ...
    @staticmethod
    def get_mobject_key(mobject: Mobject): ...

class TransformMatchingShapes(TransformMatchingAbstractBase):
    def __init__(self, mobject: Mobject, target_mobject: Mobject, transform_mismatches: bool = ..., fade_transform_mismatches: bool = ..., key_map: dict | None = ..., **kwargs) -> None: ...
    @staticmethod
    def get_mobject_parts(mobject: Mobject) -> list[Mobject]: ...
    @staticmethod
    def get_mobject_key(mobject: Mobject) -> int: ...

class TransformMatchingTex(TransformMatchingAbstractBase):
    def __init__(self, mobject: Mobject, target_mobject: Mobject, transform_mismatches: bool = ..., fade_transform_mismatches: bool = ..., key_map: dict | None = ..., **kwargs) -> None: ...
    @staticmethod
    def get_mobject_parts(mobject: Mobject) -> list[Mobject]: ...
    @staticmethod
    def get_mobject_key(mobject: Mobject) -> str: ...

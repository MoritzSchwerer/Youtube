import numpy as np
from ..camera.camera import Camera
from ..mobject.mobject import Mobject
from _typeshed import Incomplete

class MovingCamera(Camera):
    fixed_dimension: Incomplete
    default_frame_stroke_color: Incomplete
    default_frame_stroke_width: Incomplete
    frame: Incomplete
    def __init__(self, frame: Incomplete | None = ..., fixed_dimension: int = ..., default_frame_stroke_color=..., default_frame_stroke_width: int = ..., **kwargs) -> None: ...
    @property
    def frame_height(self): ...
    @property
    def frame_width(self): ...
    @property
    def frame_center(self): ...
    @frame_height.setter
    def frame_height(self, frame_height: float): ...
    @frame_width.setter
    def frame_width(self, frame_width: float): ...
    @frame_center.setter
    def frame_center(self, frame_center: np.ndarray | list | tuple | Mobject): ...
    def capture_mobjects(self, mobjects, **kwargs) -> None: ...
    def get_cached_cairo_context(self, pixel_array) -> None: ...
    def cache_cairo_context(self, pixel_array, ctx) -> None: ...
    def get_mobjects_indicating_movement(self): ...
    def auto_zoom(self, mobjects: list[Mobject], margin: float = ..., only_mobjects_in_frame: bool = ..., animate: bool = ...): ...

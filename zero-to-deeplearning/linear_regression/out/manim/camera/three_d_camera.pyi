from ..constants import *
import numpy as np
from ..camera.camera import Camera
from _typeshed import Incomplete
from manim.mobject.mobject import Mobject
from typing import Callable

class ThreeDCamera(Camera):
    focal_distance: Incomplete
    phi: Incomplete
    theta: Incomplete
    gamma: Incomplete
    zoom: Incomplete
    shading_factor: Incomplete
    default_distance: Incomplete
    light_source_start_point: Incomplete
    light_source: Incomplete
    should_apply_shading: Incomplete
    exponential_projection: Incomplete
    max_allowable_norm: Incomplete
    phi_tracker: Incomplete
    theta_tracker: Incomplete
    focal_distance_tracker: Incomplete
    gamma_tracker: Incomplete
    zoom_tracker: Incomplete
    fixed_orientation_mobjects: Incomplete
    fixed_in_frame_mobjects: Incomplete
    def __init__(self, focal_distance: float = ..., shading_factor: float = ..., default_distance: float = ..., light_source_start_point=..., should_apply_shading: bool = ..., exponential_projection: bool = ..., phi: int = ..., theta=..., gamma: int = ..., zoom: int = ..., **kwargs) -> None: ...
    @property
    def frame_center(self): ...
    def capture_mobjects(self, mobjects, **kwargs) -> None: ...
    def get_value_trackers(self): ...
    def modified_rgbas(self, vmobject, rgbas): ...
    def get_stroke_rgbas(self, vmobject, background: bool = ...): ...
    def get_fill_rgbas(self, vmobject): ...
    def get_mobjects_to_display(self, *args, **kwargs): ...
    def get_phi(self): ...
    def get_theta(self): ...
    def get_focal_distance(self): ...
    def get_gamma(self): ...
    def get_zoom(self): ...
    def set_phi(self, value: float): ...
    def set_theta(self, value: float): ...
    def set_focal_distance(self, value: float): ...
    def set_gamma(self, value: float): ...
    def set_zoom(self, value: float): ...
    rotation_matrix: Incomplete
    def reset_rotation_matrix(self) -> None: ...
    def get_rotation_matrix(self): ...
    def generate_rotation_matrix(self): ...
    def project_points(self, points: np.ndarray | list): ...
    def project_point(self, point: list | np.ndarray): ...
    def transform_points_pre_display(self, mobject, points): ...
    def add_fixed_orientation_mobjects(self, *mobjects: Mobject, use_static_center_func: bool = ..., center_func: Callable[[], np.ndarray] | None = ...): ...
    def add_fixed_in_frame_mobjects(self, *mobjects: Mobject): ...
    def remove_fixed_orientation_mobjects(self, *mobjects: Mobject): ...
    def remove_fixed_in_frame_mobjects(self, *mobjects: Mobject): ...
